@if (IsVisible)
{
    <div class="fixed top-5 right-5 p-4 rounded-md text-parchment z-50 @_notificationTypeClass transition-opacity duration-300 ease-in-out @(IsVisible ? "opacity-100" : "opacity-0")">
        <div class="flex justify-between items-start">
            <h3 class="font-bold text-lg">@Title</h3>
            <button class="text-parchment hover:text-gray-300 transition-colors duration-200" @onclick="Hide">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <p class="mt-2">@Message</p>
    </div>
}

@code {
    private bool IsVisible { get; set; }
    private string Title { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private string _notificationTypeClass = "bg-background-primary";

    public async Task Show(string title, string message, NotificationType notificationType, int duration = 5000)
    {
        Title = title;
        Message = message;
        await SetBackground(notificationType);
        IsVisible = true;
        StateHasChanged();
        await Task.Delay(duration);
        IsVisible = false;
        StateHasChanged();
    }
    
    public enum NotificationType
    {
        Success,
        Error,
        Info
    }

    private void Hide()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private Task SetBackground(NotificationType notificationType)
    {
        _notificationTypeClass = notificationType switch
        {
            NotificationType.Success => "bg-green-primary",
            NotificationType.Error => "bg-red-primary",
            NotificationType.Info => "bg-blue-primary",
            _ => "bg-background-primary"
        };

        return Task.CompletedTask;
    }
}