@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="flex items-center h-[50px]">
    <button @onclick="ToggleDropdown" class="flex items-center text-parchment hover:bg-blue-primary px-4 h-full transition duration-300 ease-in-out group">
        <span class="mr-4 font-medium">@_firstName</span>
        <div class="rounded-full w-[30px] h-[30px] bg-background-secondary flex items-center justify-center shadow-sm group-hover:bg-parchment">
            <i class="fas fa-user text-sm group-hover:text-background-secondary"></i>
        </div>
        <i class="fas fa-chevron-down ml-2 text-xs transition-transform duration-300 @(_isDropdownOpen ? "rotate-180" : "")"></i>
    </button>
    @if (_isDropdownOpen)
    {
        <div class="absolute top-[50px] right-0 bg-background-secondary shadow-lg rounded-b-lg overflow-hidden w-48 z-50">
            <a href="/profile" class="flex items-center px-4 py-3 text-parchment hover:bg-blue-primary transition duration-300 ease-in-out">
                <i class="fas fa-user-circle mr-3"></i>
                <span>Account</span>
            </a>
            <div class="border-t border-parchment"></div>
            <a href="/logout" class="flex items-center px-4 py-3 text-parchment hover:bg-red-primary transition duration-300 ease-in-out">
                <i class="fas fa-sign-out-alt mr-3"></i>
                <span>Logout</span>
            </a>
        </div>
    }
</div>


@code {
    private bool _isDropdownOpen;
    private string _firstName = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _firstName = user.Claims.First(c => c.Type == ClaimTypes.GivenName).Value;
    }

    private void ToggleDropdown()
    {
        _isDropdownOpen = !_isDropdownOpen;
    }
}