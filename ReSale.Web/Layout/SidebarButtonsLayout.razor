@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="flex flex-col justify-between h-full">
    <div class="text-parchment">
        <button class="@(NavigationManager.Uri.EndsWith("/") ? 
                           "bg-blue-primary hover:bg-blue-secondary" : 
                           "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                title="Home"
                @onclick="@(() => NavigationManager.NavigateTo("/"))">
            <div class="flex">
                <div>
                    <i class="fas fa-home w-[50px]"></i>
                </div>
            </div>
        </button>
        
        <button class="@(NavigationManager.Uri.Contains("/customers") ? 
                           "bg-blue-primary hover:bg-blue-secondary" : 
                           "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                title="Customers"
                @onclick="@(() => NavigationManager.NavigateTo("/customers"))">
            <div class="flex">
                <div>
                    <i class="fas fa-users w-[50px]"></i>
                </div>
            </div>
        </button>

        <button class="h-[60px] w-full @( _isItemsMenuOpen ? "bg-blue-primary" : "" ) hover:bg-blue-primary transition-colors duration-300 ease-in-out focus:outline-none" @onclick="ToggleItemsMenu" title="Items">
            <div class="flex">
                <div>
                    <i class="fa-solid fa-boxes-stacked w-[50px]"></i>
                </div>
            </div>
        </button>

        <!-- Nested Menu Items -->
        @if (_isItemsMenuOpen)
        {
            <div class="bg-background-primary">
                <button class="@(NavigationManager.Uri.Contains("/products") ?
                                   "bg-blue-primary hover:bg-blue-secondary" :
                                   "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                        title="Products"
                        @onclick="@(() => NavigationManager.NavigateTo("/products"))">
                    <div class="flex">
                        <div>
                            <i class="fa-solid fa-box w-[50px]"></i>
                        </div>
                    </div>
                </button>

                <button class="@(NavigationManager.Uri.Contains("/suppliers") ?
                "bg-blue-primary hover:bg-blue-secondary" :
                "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                        title="Suppliers"
                        @onclick="@(() => NavigationManager.NavigateTo("/suppliers"))">
                    <div class="flex">
                        <div>
                            <i class="fa-solid fa-truck w-[50px]"></i>
                        </div>
                    </div>
                </button>
            </div>
        }

        <button class="h-[60px] w-full @( _isSalesMenuOpen ? "bg-blue-primary" : "" ) hover:bg-blue-primary transition-colors duration-300 ease-in-out focus:outline-none" @onclick="ToggleSalesMenu" title="Sales">
            <div class="flex">
                <div>
                    <i class="fa-solid fa-clipboard w-[50px]"></i>
                </div>
            </div>
        </button>

        <!-- Nested Menu Items -->
        @if (_isSalesMenuOpen)
        {
        <div class="bg-background-primary">
            <button class="@(NavigationManager.Uri.Contains("/orders") ?
            "bg-blue-primary hover:bg-blue-secondary" :
            "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                    title="Orders"
                    @onclick="@(() => NavigationManager.NavigateTo("/orders"))">
                <div class="flex">
                    <div>
                        <i class="fa-solid fa-dolly w-[50px]"></i>
                    </div>
                </div>
            </button>

            <button class="@(NavigationManager.Uri.Contains("/purchaseorders") ?
            "bg-blue-primary hover:bg-blue-secondary" :
            "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                    title="Purchase orders"
                    @onclick="@(() => NavigationManager.NavigateTo("/purchaseorders"))">
                <div class="flex">
                    <div>
                        <i class="fa-solid fa-truck-ramp-box w-[50px]"></i>
                    </div>
                </div>
            </button>
        </div>
        }
                
        <button class="@(NavigationManager.Uri.Contains("/invoices") ? 
                           "bg-blue-primary hover:bg-blue-secondary" : 
                           "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                title="Invoices"
                @onclick="@(() => NavigationManager.NavigateTo("/invoices"))">
            <div class="flex">
                <div>
                    <i class="fa-solid fa-receipt w-[50px]"></i>
                </div>
            </div>
        </button>

        <button class="@(NavigationManager.Uri.Contains("/employees") ?
        "bg-blue-primary hover:bg-blue-secondary" :
        "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                title="Employees"
                @onclick="@(() => NavigationManager.NavigateTo("/employees"))">
            <div class="flex">
                <div>
                    <i class="fas fa-address-book w-[50px]"></i>
                </div>
            </div>
        </button>

        <button class="@(NavigationManager.Uri.Contains("/statistics") ?
        "bg-blue-primary hover:bg-blue-secondary" :
        "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                title="Statistics"
                @onclick="@(() => NavigationManager.NavigateTo("/statistics"))">
            <div class="flex">
                <div>
                    <i class="fa-solid fa-chart-bar w-[50px]"></i>
                </div>
            </div>
        </button>
    </div>
    
    <div class="text-parchment">
        <button class="@(NavigationManager.Uri.Contains("/settings") ? 
                           "bg-blue-primary hover:bg-blue-secondary" : 
                           "hover:bg-blue-primary") h-[60px] w-full transition-colors duration-300 ease-in-out focus:outline-none"
                title="Settings"
                @onclick="@(() => NavigationManager.NavigateTo("/settings"))">
            <div class="flex">
                <div>
                    <i class="fa-solid fa-gear w-[50px]"></i>
                </div>
            </div>
        </button>
    
        <button class="w-full h-[60px] hover:bg-red-secondary transition-colors duration-300 ease-in-out focus:outline-none"
                title="Log out"
                @onclick="Logout">
            <div class="flex">
                <div>
                    <i class="fa-solid fa-right-from-bracket w-[50px]"></i>
                </div>
            </div>
        </button>
    </div>
</div>

@code {
    private string? _currentUri;
    private bool _isSalesMenuOpen;
    private bool _isItemsMenuOpen;

    protected override void OnInitialized()
    {
        _currentUri = NavigationManager.Uri;
        
        NavigationManager.LocationChanged += HandleLocationChanged!;
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (_currentUri == NavigationManager.Uri) return;
        _currentUri = NavigationManager.Uri;
        StateHasChanged();
    }
    
    private void ToggleSalesMenu()
    {
        _isSalesMenuOpen = !_isSalesMenuOpen;
    }
    
    private void ToggleItemsMenu()
    {
        _isItemsMenuOpen = !_isItemsMenuOpen;
    }
    
    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("accessToken");
        await LocalStorage.RemoveItemAsync("refreshToken");
        
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        NavigationManager.NavigateTo("/");
    }
}