@page "/login"

@using ReSale.Api.Contracts.Requests.Auth
@inject IAuthenticationClient AuthenticationClient
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService

<PageTitle>ReSale | Login</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-background-primary-light dark:bg-background-primary-dark">
    <div class="bg-background-secondary-light dark:bg-background-secondary-dark p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 class="text-3xl font-bold mb-6 text-center text-text-primary-light dark:text-text-primary-dark">ReSale</h2>
        <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator/>

            <div class="mb-6">
                <label for="email" class="block text-sm font-medium mb-2 text-text-primary-light dark:text-text-primary-dark">Email</label>
                <InputText id="email" class="w-full p-3 rounded-md bg-background-primary-dark dark:bg-background-primary-light text-text-primary-dark dark:text-text-primary-light focus:outline-none focus:ring-2 focus:ring-blue-primary" @bind-Value="_loginModel.Email"/>
                <ValidationMessage For="@(() => _loginModel.Email)" class="text-red-primary text-sm mt-1"/>
            </div>

            <div class="mb-6">
                <label for="password" class="block text-sm font-medium mb-2 text-text-primary-light dark:text-text-primary-dark">Password</label>
                <InputText id="password" type="password" class="w-full p-3 rounded-md bg-background-primary-dark dark:bg-background-primary-light text-text-primary-dark dark:text-text-primary-light focus:outline-none focus:ring-2 focus:ring-blue-primary" @bind-Value="_loginModel.Password"/>
                <ValidationMessage For="@(() => _loginModel.Password)" class="text-red-primary text-sm mt-1"/>
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <p class="text-red-primary text-sm mt-1">@_errorMessage</p>
                }
            </div>

            <div class="mb-6">
                <a href="/forgot" class="inline-block text-text-primary-light dark:text-text-primary-dark text-sm font-medium transition duration-300 ease-in-out hover:scale-105">Forgot Password?</a>
            </div>

            <button type="submit" disabled="@_isBusy" class="w-full bg-blue-primary disabled:bg-gray-400 text-text-primary-dark p-3 rounded-md font-medium transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-primary focus:ring-opacity-50">
                @if (_isBusy)
                {
                    <span class="inline-block animate-spin mr-2">&#8635;</span>
                }
                Login
            </button>
        </EditForm>
        <div class="mt-4 text-center">
            <a href="/register" class="inline-block text-text-primary-light dark:text-text-primary-dark font-medium text-sm transition duration-300 ease-in-out hover:scale-105">
                Don't have an account? Register here
            </a>
        </div>
    </div>
</div>

@code {
    private LoginModel _loginModel = new();
    private string _errorMessage = string.Empty;
    private bool _isBusy = false;

    private async Task HandleLogin()
    {
        _errorMessage = string.Empty;
        _isBusy = true;
        
        try
        {
            var result = await AuthenticationClient.Login(new LoginUserRequest(_loginModel.Email, _loginModel.Password));
        
            await LocalStorage.SetItemAsync("accessToken", result.AccessToken);
            await LocalStorage.SetItemAsync("refreshToken", result.RefreshToken);
            
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _isBusy = false;
            Navigation.NavigateTo("/");
        }
        catch (Exception)
        {
            _isBusy = false;
            await NotificationService.Show("Error", "An error occurred while trying to log in. Please try again.", Notification.NotificationType.Error);
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}