@page "/verify/{Token:guid}"
@inject IAuthenticationClient AuthenticationClient
@inject NavigationManager Navigation

<PageTitle>ReSale | Verify Email</PageTitle>

<Notification @ref="_notificationComponent" />

<div class="h-screen text-white">
    <div class="flex items-center justify-center h-screen bg-darker-gray">
        <div class="bg-dark-gray p-8 rounded shadow-md w-full max-w-md text-center">
            <h2 class="text-2xl mb-6 text-white">Verify your email!</h2>
            @if (!_isVerified && !_isVerifying)
            {
                <button @onclick="VerifyEmail" class="mt-4 bg-blue-primary hover:bg-blue-secondary text-white p-4 rounded">
                    Verify Email
                </button>
            }
            @if (_isVerifying)
            {
                <p>Verifying your email...</p>
            }
            else if (_isVerified)
            {
                <p class="text-green-primary">Your email has been successfully verified!</p>
                <button @onclick="NavigateToLogin" class="mt-4 bg-blue-primary hover:bg-blue-secondary text-white p-2 rounded">
                    Go to Login
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Token { get; set; }

    private Notification _notificationComponent = new();
    private bool _isVerifying = false;
    private bool _isVerified = false;
    private string _errorMessage = string.Empty;

    private async Task VerifyEmail()
    {
        try
        {
            await AuthenticationClient.Verify(Token);
            _isVerified = true;
        }
        catch (Exception)
        {
            _errorMessage = "An error occurred while verifying your email. Please try again.";
            await ShowNotification("Error", _errorMessage, Notification.NotificationType.Error);
        }
        finally
        {
            _isVerifying = false;
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task ShowNotification(string title, string message, Notification.NotificationType notificationType)
    {
        await _notificationComponent.Show(title, message, notificationType);
    }
}
