@page "/customers/create"

@using Bogus
@using ReSale.Api.Contracts.Requests.Customers

@inject ICustomersClient CustomersClient
@inject NavigationManager NavigationManager

<Notification @ref="_notificationComponent" />

<div class="h-full flex flex-col">
    <h3 class="p-4 bg-table-gray rounded">Create Customer</h3>

    <div class="md:flex w-full block overflow-y-auto">
        <EditForm Model="_customer" id="create" class="md:flex block w-full" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <div class="mt-4 p-4 flex-grow bg-table-gray rounded">
                <h3>Contact</h3>

                <div class="mb-4 mt-4">
                    <label for="email" class="block">Email</label>
                    <InputText id="email" @bind-Value="_customer.Email" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                    <div class="text-red-primary">
                        <ValidationMessage For="@(() => _customer.Email)"/>
                    </div>
                </div>

                <div class="md:flex block mt-4">
                    <div class="flex-grow">
                        <div class="mb-4">
                            <label for="firstName" class="block">First Name</label>
                            <InputText id="firstName" @bind-Value="_customer.FirstName" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                            <div class="text-red-primary">
                                <ValidationMessage For="@(() => _customer.FirstName)"/>
                            </div>
                        </div>
                    </div>

                    <div class="flex-grow">
                        <div class="mb-4 md:ml-4">
                            <label for="lastName" class="block">Last Name</label>
                            <InputText id="lastName" @bind-Value="_customer.LastName" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                            <div class="text-red-primary">
                                <ValidationMessage For="@(() => _customer.LastName)"/>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-4 mt-2">
                    <label for="phoneNumber" class="block">PhoneNumber</label>
                    <InputText id="phoneNumber" @bind-Value="_customer.PhoneNumber" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                    <div class="text-red-primary">
                        <ValidationMessage For="@(() => _customer.PhoneNumber)"/>
                    </div>
                </div>
            </div>

            <div class="flex-grow">
                <div class="mt-4 md:ml-4 ml-0 p-4 flex-grow bg-table-gray rounded">
                    <h3>Shipping Address</h3>

                    <div class="mb-4 mt-4">
                        <label for="shippingStreet" class="block">Street</label>
                        <InputText id="shippingStreet" @bind-Value="_customer.ShippingStreet" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.ShippingStreet)"/>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="shippingCity" class="block">City</label>
                        <InputText id="shippingCity" @bind-Value="_customer.ShippingCity" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.ShippingCity)"/>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="shippingZipCode" class="block">Zip Code</label>
                        <InputText id="shippingZipCode" @bind-Value="_customer.ShippingZipCode" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.ShippingZipCode)"/>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="shippingCountry" class="block">Country</label>
                        <InputText id="shippingCountry" @bind-Value="_customer.ShippingCountry" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.ShippingCountry)"/>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="shippingState" class="block">State (Optional)</label>
                        <InputText id="shippingState" @bind-Value="_customer.ShippingState" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.ShippingState)"/>
                        </div>
                    </div>
                </div>

                <div class="mt-4 md:ml-4 ml-0 p-4 flex-grow bg-table-gray rounded">
                    <h3>Billing Address (Optional)</h3>

                    <div class="mb-4 mt-4">
                        <label for="billingStreet" class="block">Street</label>
                        <InputText id="billingStreet" @bind-Value="_customer.BillingStreet" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.BillingStreet)"/>
                        </div>
                    </div>

                    <div class="mb-4 mt-4">
                        <label for="billingCity" class="block">City</label>
                        <InputText id="billingCity" @bind-Value="_customer.BillingCity" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.BillingCity)"/>
                        </div>
                    </div>

                    <div class="mb-4 mt-4">
                        <label for="billingZipCode" class="block">Zip Code</label>
                        <InputText id="billingZipCode" @bind-Value="_customer.BillingZipCode" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.BillingZipCode)"/>
                        </div>
                    </div>

                    <div class="mb-4 mt-4">
                        <label for="billingCountry" class="block">Country</label>
                        <InputText id="billingCountry" @bind-Value="_customer.BillingCountry" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.BillingCountry)"/>
                        </div>
                    </div>

                    <div class="mb-4 mt-4">
                        <label for="billingState" class="block">State (Optional)</label>
                        <InputText id="billingState" @bind-Value="_customer.BillingState" class="bg-dark-gray p-2 mt-2 rounded w-full"/>
                        <div class="text-red-primary">
                            <ValidationMessage For="@(() => _customer.BillingState)"/>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
    
    <div class="flex mt-4">
        <button type="submit" form="create" class="hover:bg-green-primary bg-table-gray rounded w-[100px] h-[40px]">Create</button>
        <button class="hover:bg-red-primary bg-table-gray rounded w-[100px] h-[40px] ml-2" @onclick="@(() => NavigationManager.NavigateTo("/customers"))">Cancel</button>
    </div>
</div>

@code {
    private CreateCustomer _customer = new();
    private Notification _notificationComponent = new();
    
    private async Task ShowNotification(string title, string message, Notification.NotificationType notificationType)
    { 
        await _notificationComponent.Show(title, message, notificationType);
    }

    protected override void OnInitialized()
    {
        var faker = new Faker<CreateCustomer>("sv")
            .RuleFor(c => c.Email, f => f.Internet.Email())
            .RuleFor(c => c.FirstName, f => f.Person.FirstName)
            .RuleFor(c => c.LastName, f => f.Person.LastName)
            .RuleFor(c => c.PhoneNumber, f => f.Phone.PhoneNumber("+46#########"))
            .RuleFor(c => c.ShippingStreet, f => f.Address.StreetAddress())
            .RuleFor(c => c.ShippingCity, f => f.Address.City())
            .RuleFor(c => c.ShippingZipCode, f => f.Address.ZipCode())
            .RuleFor(c => c.ShippingCountry, f => f.Address.Country());
        
        _customer = faker.Generate();
    }

    private async Task HandleValidSubmit()
    {
        var request = new CreateCustomerRequest
        {
            Email = _customer.Email,
            FirstName = _customer.FirstName,
            LastName = _customer.LastName,
            ShippingStreet = _customer.ShippingStreet,
            ShippingCity = _customer.ShippingCity,
            ShippingState = _customer.ShippingState,
            ShippingZipCode = _customer.ShippingZipCode,
            ShippingCountry = _customer.ShippingCountry,
            PhoneNumber = _customer.PhoneNumber,
            BillingStreet = _customer.BillingStreet,
            BillingCity = _customer.BillingCity,
            BillingState = _customer.BillingState,
            BillingZipCode = _customer.BillingZipCode,
            BillingCountry = _customer.BillingCountry
        };
        
        try
        {
            await CustomersClient.CreateCustomer(request);
            _customer = new CreateCustomer();
            _ = ShowNotification("Success", "Customer created successfully!", Notification.NotificationType.Success);
        }
        catch (Exception)
        {
            _ = ShowNotification("Error", "Failed to create customer, please try again!", Notification.NotificationType.Error);
        }
    }
    
    private class CreateCustomer
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;
    
        [Required]
        public string LastName { get; set; } = string.Empty;
    
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    
        [Required]
        public string ShippingStreet { get; set; } = string.Empty;
    
        [Required]
        public string ShippingCity { get; set; } = string.Empty;
    
        [Required]
        public string ShippingZipCode { get; set; } = string.Empty;
    
        [Required]
        public string ShippingCountry { get; set; } = string.Empty;
    
        public string ShippingState { get; set; } = string.Empty;
        
        [Required]
        public string PhoneNumber { get; set; } = string.Empty;
        
        public string BillingStreet { get; set; } = string.Empty;
        public string BillingCity { get; set; } = string.Empty;
        public string BillingZipCode { get; set; } = string.Empty;
        public string BillingCountry { get; set; } = string.Empty;
        public string BillingState { get; set; } = string.Empty;
    }
}