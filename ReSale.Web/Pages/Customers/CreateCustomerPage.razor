@page "/customers/create"

@inject ICustomersClient CustomersClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<div class="h-full flex flex-col bg-background-primary-light dark:bg-background-primary-dark p-4">
    <h3 class="p-4 bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark rounded">Create Customer</h3>

    <EditForm Model="_customer" id="create" class="w-full" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <div class="md:flex w-full block overflow-y-auto">
            <div class="mt-4 p-4 flex-grow bg-background-secondary-light dark:bg-background-secondary-dark rounded">
                <h3 class="text-text-primary-light dark:text-text-primary-dark">Contact Information</h3>

                <div class="mb-4 mt-4">
                    <label for="email" class="block text-text-secondary-light dark:text-text-secondary-dark">Email</label>
                    <InputText id="email" @bind-Value="_customer.Email" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-2 rounded w-full"/>
                    <ValidationMessage For="@(() => _customer.Email)" class="text-red-primary"/>
                </div>

                <div class="md:flex block mt-4">
                    <div class="flex-grow mr-2">
                        <label for="firstName" class="block text-text-secondary-light dark:text-text-secondary-dark">First Name</label>
                        <InputText id="firstName" @bind-Value="_customer.FirstName" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-2 rounded w-full"/>
                        <ValidationMessage For="@(() => _customer.FirstName)" class="text-red-primary"/>
                    </div>

                    <div class="flex-grow ml-2">
                        <label for="lastName" class="block text-text-secondary-light dark:text-text-secondary-dark">Last Name</label>
                        <InputText id="lastName" @bind-Value="_customer.LastName" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-2 rounded w-full"/>
                        <ValidationMessage For="@(() => _customer.LastName)" class="text-red-primary"/>
                    </div>
                </div>

                <div class="mb-4 mt-4">
                    <label for="phoneNumber" class="block text-text-secondary-light dark:text-text-secondary-dark">Phone Number</label>
                    <InputText id="phoneNumber" @bind-Value="_customer.PhoneNumber" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-2 rounded w-full"/>
                    <ValidationMessage For="@(() => _customer.PhoneNumber)" class="text-red-primary"/>
                </div>
            </div>

            <div class="flex-grow md:ml-4">
                <div class="mt-4 p-4 flex-grow bg-background-secondary-light dark:bg-background-secondary-dark rounded">
                    <h3 class="text-text-primary-light dark:text-text-primary-dark">Shipping Address</h3>

                    <AddressForm 
                        Street="@_customer.ShippingStreet"
                        City="@_customer.ShippingCity"
                        ZipCode="@_customer.ShippingZipCode"
                        Country="@_customer.ShippingCountry"
                        State="@_customer.ShippingState"
                        Prefix="shipping"
                    />
                </div>

                <div class="mt-4 p-4 flex-grow bg-background-secondary-light dark:bg-background-secondary-dark rounded">
                    <h3 class="text-lg font-semibold mb-2 text-text-primary-light dark:text-text-primary-dark">Billing Address</h3>
                    <div class="mb-4 flex items-center">
                        <InputCheckbox @bind-Value="_useSameAddress" id="useSameAddress" class="mr-2" />
                        <label for="useSameAddress" class="cursor-pointer select-none text-text-primary-light dark:text-text-primary-dark">
                            Use same as shipping address
                        </label>
                    </div>

                    @if (!_useSameAddress)
                    {
                        <AddressForm 
                            Street="@_customer.BillingStreet"
                            City="@_customer.BillingCity"
                            ZipCode="@_customer.BillingZipCode"
                            Country="@_customer.BillingCountry"
                            State="@_customer.BillingState"
                            Prefix="billing"
                        />
                    }
                </div>
            </div>
        </div>
        
        <div class="flex mt-4">
            <button type="submit" class="bg-green-primary hover:bg-green-secondary text-text-primary-dark rounded w-[100px] h-[40px]">Create</button>
            <button type="button" class="bg-red-primary hover:bg-red-secondary text-text-primary-dark rounded w-[100px] h-[40px] ml-2" @onclick="@(() => NavigationManager.NavigateTo("/customers"))">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    private CreateCustomer _customer = new();
    private bool _useSameAddress = true;

    protected override void OnInitialized()
    {
        var faker = new Faker<CreateCustomer>("sv")
            .RuleFor(c => c.Email, f => f.Internet.Email())
            .RuleFor(c => c.FirstName, f => f.Person.FirstName)
            .RuleFor(c => c.LastName, f => f.Person.LastName)
            .RuleFor(c => c.PhoneNumber, f => f.Phone.PhoneNumber("+46#########"))
            .RuleFor(c => c.ShippingStreet, f => f.Address.StreetAddress())
            .RuleFor(c => c.ShippingCity, f => f.Address.City())
            .RuleFor(c => c.ShippingZipCode, f => f.Address.ZipCode())
            .RuleFor(c => c.ShippingCountry, f => f.Address.Country());
        
        _customer = faker.Generate();
    }

    private async Task HandleValidSubmit()
    {
        var request = new CreateCustomerRequest(
            _customer.Email,
            _customer.FirstName,
            _customer.LastName,
            _customer.ShippingStreet,
            _customer.ShippingCity,
            _customer.ShippingZipCode,
            _customer.ShippingCountry,
            _customer.ShippingState,
            _customer.PhoneNumber,
            _customer.BillingStreet,
            _customer.BillingCity,
            _customer.BillingZipCode,
            _customer.BillingCountry,
            _customer.BillingState
            );
        
        try
        {
            await CustomersClient.Create(request);
            _customer = new CreateCustomer();
            await NotificationService.Show("Success", "Customer created successfully!", Notification.NotificationType.Success);
            NavigationManager.NavigateTo("/customers");
        }
        catch (Exception)
        {
            await NotificationService.Show("Error", "Failed to create customer, please try again!", Notification.NotificationType.Error);
        }
    }
    
    private class CreateCustomer
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;
    
        [Required]
        public string LastName { get; set; } = string.Empty;
    
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    
        [Required]
        public string ShippingStreet { get; set; } = string.Empty;
    
        [Required]
        public string ShippingCity { get; set; } = string.Empty;
    
        [Required]
        public string ShippingZipCode { get; set; } = string.Empty;
    
        [Required]
        public string ShippingCountry { get; set; } = string.Empty;
    
        public string ShippingState { get; set; } = string.Empty;
        
        [Required]
        public string PhoneNumber { get; set; } = string.Empty;
        
        public string BillingStreet { get; set; } = string.Empty;
        public string BillingCity { get; set; } = string.Empty;
        public string BillingZipCode { get; set; } = string.Empty;
        public string BillingCountry { get; set; } = string.Empty;
        public string BillingState { get; set; } = string.Empty;
    }
}