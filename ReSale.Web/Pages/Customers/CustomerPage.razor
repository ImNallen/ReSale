@page "/customers/{id:guid}"

@inject ICustomersClient CustomersClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<div class="h-full flex flex-col bg-background-primary-light dark:bg-background-primary-dark p-4">
    <div class="flex justify-between items-center bg-background-secondary-light dark:bg-background-secondary-dark rounded p-4">
        <h3 class="text-xl font-semibold text-text-primary-light dark:text-text-primary-dark">Customer Details</h3>
        
        <div>
            <button class="bg-green-primary hover:bg-green-secondary text-text-primary-light dark:text-text-primary-dark hover:text-text-primary-dark p-2 rounded transition duration-300 ease-in-out mr-2" @onclick="@(() => NavigationManager.NavigateTo($"/customers/edit/{Customer.Id}"))" title="Edit Customer">
                <i class="fas fa-pen-to-square"></i> Edit
            </button>
            <button class="bg-red-primary hover:bg-red-secondary text-text-primary-light dark:text-text-primary-dark hover:text-text-primary-dark p-2 rounded transition duration-300 ease-in-out" @onclick="Delete" title="Delete Customer">
                <i class="fas fa-trash-alt"></i> Delete
            </button>
        </div>
    </div>

    <div class="md:flex w-full block overflow-y-auto mt-4">
        <div class="md:w-1/2 p-4 bg-background-secondary-light dark:bg-background-secondary-dark rounded">
            <h3 class="text-lg font-semibold mb-4 text-text-primary-light dark:text-text-primary-dark">Contact Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label for="id" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">ID</label>
                    <InputText id="id" @bind-Value="Customer.IdAsString" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="email" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Email</label>
                    <InputText id="email" @bind-Value="Customer.Email" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="firstName" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">First Name</label>
                    <InputText id="firstName" @bind-Value="Customer.FirstName" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="lastName" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Last Name</label>
                    <InputText id="lastName" @bind-Value="Customer.LastName" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="phoneNumber" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Phone Number</label>
                    <InputText id="phoneNumber" @bind-Value="Customer.PhoneNumber" class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
            </div>
        </div>
        <div class="md:w-1/2 md:ml-4 mt-4 md:mt-0">
            <div class="p-4 bg-background-secondary-light dark:bg-background-secondary-dark rounded mb-4">
                <h3 class="text-lg font-semibold mb-4 text-text-primary-light dark:text-text-primary-dark">Shipping Address</h3>
                <AddressDisplay
                    Street="@Customer.ShippingStreet"
                    City="@Customer.ShippingCity"
                    ZipCode="@Customer.ShippingZipCode"
                    Country="@Customer.ShippingCountry"
                    State="@Customer.ShippingState"
                />
            </div>
            <div class="p-4 bg-background-secondary-light dark:bg-background-secondary-dark rounded">
                <h3 class="text-lg font-semibold mb-4 text-text-primary-light dark:text-text-primary-dark">Billing Address</h3>
                @if (string.IsNullOrWhiteSpace(Customer.BillingStreet))
                {
                    <p class="text-text-secondary-light dark:text-text-secondary-dark italic">Same as shipping address</p>
                }
                else
                {
                    <AddressDisplay
                        Street="@Customer.BillingStreet"
                        City="@Customer.BillingCity"
                        ZipCode="@Customer.BillingZipCode"
                        Country="@Customer.BillingCountry"
                        State="@Customer.BillingState"
                    />
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private CustomerModel Customer { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var customer = await CustomersClient.GetById(Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("/customers");
        }
        
        Customer = new CustomerModel
        {
            Id = customer!.Id,
            FirstName = customer.FirstName,
            LastName = customer.LastName,
            Email = customer.Email,
            ShippingStreet = customer.ShippingStreet,
            ShippingCity = customer.ShippingCity,
            ShippingZipCode = customer.ShippingZipCode,
            ShippingCountry = customer.ShippingCountry,
            ShippingState = customer.ShippingState,
            PhoneNumber = customer.PhoneNumber,
            IdAsString = customer.Id.ToString(),
            BillingStreet = customer.BillingStreet,
            BillingCity = customer.BillingCity,
            BillingZipCode = customer.BillingZipCode,
            BillingCountry = customer.BillingCountry,
            BillingState = customer.BillingState
        };
    }
    
    private async Task Delete()
    {
        try
        {
            await CustomersClient.Delete(Customer.Id);
            await NotificationService.Show("Success", "Customer deleted successfully!", Notification.NotificationType.Success);
            NavigationManager.NavigateTo("/customers");
        }
        catch (Exception)
        {
            await NotificationService.Show("Error", "Failed to delete customer. Please try again.", Notification.NotificationType.Error);
        }
    }
    
    private class CustomerModel
    {
        public Guid Id { get; init; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string ShippingStreet { get; set; } = string.Empty;
        public string ShippingCity { get; set; } = string.Empty;
        public string ShippingZipCode { get; set; } = string.Empty;
        public string ShippingCountry { get; set; } = string.Empty;
        public string? ShippingState { get; set; } = string.Empty;
        public string IdAsString { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string? BillingStreet { get; set; } = string.Empty;
        public string? BillingCity { get; set; } = string.Empty;
        public string? BillingZipCode { get; set; } = string.Empty;
        public string? BillingCountry { get; set; } = string.Empty;
        public string? BillingState { get; set; } = string.Empty;
    }
}