@page "/customers/edit/{Id:guid}"

@using ReSale.Api.Contracts.Requests.Customers

@inject ICustomersClient CustomersClient
@inject NavigationManager NavigationManager

<div class="h-full flex flex-col">
    <h3 class="p-4 bg-table-gray">Edit Customer</h3>

    <EditForm Model="_customer" class="mt-4 p-4 bg-table-gray flex-grow" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>

        <div class="mb-4">
            <label for="firstName" class="block">First Name</label>
            <InputText id="firstName" @bind-Value="_customer.FirstName" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.FirstName)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="lastName" class="block">Last Name</label>
            <InputText id="lastName" @bind-Value="_customer.LastName" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.LastName)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="shippingStreet" class="block">Street</label>
            <InputText id="shippingStreet" @bind-Value="_customer.ShippingStreet" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.ShippingStreet)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="shippingCity" class="block">City</label>
            <InputText id="shippingCity" @bind-Value="_customer.ShippingCity" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.ShippingCity)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="shippingZipCode" class="block">Zip Code</label>
            <InputText id="shippingZipCode" @bind-Value="_customer.ShippingZipCode" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.ShippingZipCode)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="shippingCountry" class="block">Country</label>
            <InputText id="shippingCountry" @bind-Value="_customer.ShippingCountry" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.ShippingCountry)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="shippingState" class="block">State (Optional)</label>
            <InputText id="shippingState" @bind-Value="_customer.ShippingState" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.ShippingState)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="billingStreet" class="block">Street</label>
            <InputText id="billingStreet" @bind-Value="_customer.BillingStreet" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.BillingStreet)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="billingCity" class="block">City</label>
            <InputText id="billingCity" @bind-Value="_customer.BillingCity" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.BillingCity)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="billingZipCode" class="block">Zip Code</label>
            <InputText id="billingZipCode" @bind-Value="_customer.BillingZipCode" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.BillingZipCode)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="billingCountry" class="block">Country</label>
            <InputText id="billingCountry" @bind-Value="_customer.BillingCountry" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.BillingCountry)"/>
            </div>
        </div>

        <div class="mb-4">
            <label for="billingState" class="block">State (Optional)</label>
            <InputText id="billingState" @bind-Value="_customer.BillingState" class="bg-dark-gray p-2 w-[210px]"/>
            <div class="text-red-primary">
                <ValidationMessage For="@(() => _customer.BillingState)"/>
            </div>
        </div>

        <div class="flex">
            <button type="submit" class="hover:bg-green-primary bg-dark-gray w-[100px] h-[40px]">Update</button>
            <button class="hover:bg-red-primary bg-dark-gray w-[100px] h-[40px] ml-2" @onclick="@(() => NavigationManager.NavigateTo("/customers"))">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private UpdateCustomer _customer = new();
    
    protected override async Task OnInitializedAsync()
    {
        var customer = await CustomersClient.GetById(Id);
        
        if (customer is null)
        {
            NavigationManager.NavigateTo("/customers");
        }
        
        _customer = new UpdateCustomer
        {
            FirstName = customer!.FirstName,
            LastName = customer.LastName,
            ShippingStreet = customer.ShippingStreet,
            ShippingCity = customer.ShippingCity,
            ShippingState = customer.ShippingState,
            ShippingZipCode = customer.ShippingZipCode,
            ShippingCountry = customer.ShippingCountry,
            BillingStreet = customer.BillingStreet,
            BillingCity = customer.BillingCity,
            BillingZipCode = customer.BillingZipCode,
            BillingCountry = customer.BillingCountry,
            BillingState = customer.BillingState
        };
    }
    
    private async Task HandleValidSubmit()
    {
        var request = new UpdateCustomerRequest(
            _customer.FirstName,
            _customer.LastName,
            _customer.ShippingStreet,
            _customer.ShippingCity,
            _customer.ShippingZipCode,
            _customer.ShippingCountry,
            _customer.ShippingState,
            _customer.BillingStreet,
            _customer.BillingCity,
            _customer.BillingZipCode,
            _customer.BillingCountry,
            _customer.BillingState);
        
        await CustomersClient.Update(Id, request);
        
        NavigationManager.NavigateTo("/customers");
    }
    
    private class UpdateCustomer
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;
    
        [Required]
        public string LastName { get; set; } = string.Empty;
    
        [Required]
        public string ShippingStreet { get; set; } = string.Empty;
    
        [Required]
        public string ShippingCity { get; set; } = string.Empty;
    
        [Required]
        public string ShippingZipCode { get; set; } = string.Empty;
    
        [Required]
        public string ShippingCountry { get; set; } = string.Empty;
    
        public string? ShippingState { get; set; } = string.Empty;
        
        public string? BillingStreet { get; set; } = string.Empty;
        public string? BillingCity { get; set; } = string.Empty;
        public string? BillingZipCode { get; set; } = string.Empty;
        public string? BillingCountry { get; set; } = string.Empty;
        public string? BillingState { get; set; } = string.Empty;
    }
}