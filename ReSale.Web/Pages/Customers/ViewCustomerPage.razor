@page "/customers/{id:guid}"

@inject ICustomersClient CustomersClient
@inject NavigationManager NavigationManager

<div class="h-full flex flex-col">
    <div class="flex justify-between">
        <h3 class="p-4 bg-table-gray rounded">Customer</h3>
        
        <div>
            <button class="bg-table-gray hover:bg-blue-primary p-[10px] rounded" @onclick="@(() => NavigationManager.NavigateTo($"/customers/edit/{Customer.Id}"))" title="Edit">
                <i class="fas fa-pen-to-square p-2"></i>
            </button>
            <button class="bg-table-gray hover:bg-red-primary p-[10px] rounded" @onclick="Delete" title="Delete">
                <i class="fas fa-minus p-2"></i>
            </button>
        </div>
    </div>

    <div class="md:flex w-full block overflow-y-auto">
        <div class="mt-4 p-4 flex-grow bg-table-gray rounded">
            <h3>Contact</h3>
            <div class="mb-4 mt-4">
                <label for="id" class="block">ID</label>
                <InputText id="id" @bind-Value="Customer.IdAsString" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
            </div>
            <div class="md:flex block mt-4">
                <div class="flex-grow">
                    <div class="mb-4">
                        <label for="firstName" class="block">First Name</label>
                        <InputText id="firstName" @bind-Value="Customer.FirstName" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                    </div>
                </div>
                <div class="flex-grow md:ml-4">
                    <label for="lastName" class="block">Last Name</label>
                    <InputText id="lastName" @bind-Value="Customer.LastName" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>
            </div>
            <div class="mb-4 md:mt-0 mt-4">
                <label for="email" class="block">Email</label>
                <InputText id="email" @bind-Value="Customer.Email" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
            </div>
            <div class="mb-4 md:mt-0 mt-4">
                <label for="phoneNumber" class="block">Phone number</label>
                <InputText id="phoneNumber" @bind-Value="Customer.PhoneNumber" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
            </div>
        </div>
        <div class="flex-grow">
            <div class="mt-4 md:ml-4 ml-0 p-4 flex-grow bg-table-gray rounded">
                <h3>Shipping Address</h3>

                <div class="mt-4">
                    <label for="shippingStreet" class="block">Street</label>
                    <InputText id="shippingStreet" @bind-Value="Customer.ShippingStreet" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                <div class="mt-4">
                    <label for="shippingCity" class="block">City</label>
                    <InputText id="shippingCity" @bind-Value="Customer.ShippingCity" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                <div class="mt-4">
                    <label for="shippingZipCode" class="block">Zip Code</label>
                    <InputText id="shippingZipCode" @bind-Value="Customer.ShippingZipCode" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                <div class="mt-4">
                    <label for="shippingCountry" class="block">Country</label>
                    <InputText id="shippingCountry" @bind-Value="Customer.ShippingCountry" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                @if (!string.IsNullOrWhiteSpace(Customer.ShippingState))
                {
                    <div class="mt-4">
                        <label for="shippingState" class="block">State</label>
                        <InputText id="shippingState" @bind-Value="Customer.ShippingState" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                    </div>
                }
            </div>
            <div class="mt-4 md:ml-4 ml-0 p-4 flex-grow bg-table-gray rounded">
                <h3>Billing Address (Optional)</h3>

                <div class="mt-4">
                    <label for="billingStreet" class="block">Street</label>
                    <InputText id="billingStreet" @bind-Value="Customer.BillingStreet" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                <div class="mt-4">
                    <label for="billingCity" class="block">City</label>
                    <InputText id="billingCity" @bind-Value="Customer.BillingCity" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                <div class="mt-4">
                    <label for="billingZipCode" class="block">Zip Code</label>
                    <InputText id="billingZipCode" @bind-Value="Customer.BillingZipCode" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                <div class="mt-4">
                    <label for="billingCountry" class="block">Country</label>
                    <InputText id="billingCountry" @bind-Value="Customer.BillingCountry" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                </div>

                @if (!string.IsNullOrWhiteSpace(Customer.ShippingState))
                {
                    <div class="mt-4">
                        <label for="billingState" class="block">State</label>
                        <InputText id="billingState" @bind-Value="Customer.BillingState" class="bg-dark-gray p-2 mt-2 rounded w-full" disabled="true"/>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private CustomerModel Customer { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var customer = await CustomersClient.GetCustomer(Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("/customers");
        }
        
        Customer = new CustomerModel
        {
            Id = customer!.Id,
            FirstName = customer.FirstName,
            LastName = customer.LastName,
            Email = customer.Email,
            ShippingStreet = customer.ShippingStreet,
            ShippingCity = customer.ShippingCity,
            ShippingZipCode = customer.ShippingZipCode,
            ShippingCountry = customer.ShippingCountry,
            ShippingState = customer.ShippingState,
            PhoneNumber = customer.PhoneNumber,
            IdAsString = customer.Id.ToString(),
            BillingStreet = customer.BillingStreet,
            BillingCity = customer.BillingCity,
            BillingZipCode = customer.BillingZipCode,
            BillingCountry = customer.BillingCountry,
            BillingState = customer.BillingState
        };
    }
    
    private async Task Delete()
    {
        await CustomersClient.DeleteCustomer(Customer.Id);
        
        NavigationManager.NavigateTo("/customers");
    }
    
    private class CustomerModel
    {
        public Guid Id { get; init; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string ShippingStreet { get; set; } = string.Empty;
        public string ShippingCity { get; set; } = string.Empty;
        public string ShippingZipCode { get; set; } = string.Empty;
        public string ShippingCountry { get; set; } = string.Empty;
        public string ShippingState { get; set; } = string.Empty;
        public string IdAsString { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string? BillingStreet { get; set; } = string.Empty;
        public string? BillingCity { get; set; } = string.Empty;
        public string? BillingZipCode { get; set; } = string.Empty;
        public string? BillingCountry { get; set; } = string.Empty;
        public string? BillingState { get; set; } = string.Empty;
    }
}