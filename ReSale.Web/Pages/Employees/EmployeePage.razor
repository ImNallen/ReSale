@page "/employees/{id:guid}"
@using System.Globalization

@inject IEmployeesClient EmployeesClient
@inject NavigationManager NavigationManager

<div class="h-full flex flex-col bg-background-secondary-light dark:bg-background-secondary-dark p-4">
    <div class="flex justify-between items-center bg-background-primary-light dark:bg-background-primary-dark rounded p-4">
        <h3 class="text-xl font-semibold text-text-primary-light dark:text-text-primary-dark">Employee Details</h3>

        <div>
            <button class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark hover:bg-blue-primary dark:hover:bg-blue-primary hover:text-text-primary-dark p-2 rounded transition duration-300 ease-in-out mr-2" @onclick="@(() => NavigationManager.NavigateTo($"/employees/edit/{Employee.Id}"))" title="Edit Employee">
                <i class="fas fa-pen-to-square"></i> Edit
            </button>
            <button class="bg-background-primary-light dark:bg-background-primary-dark text-text-primary-light dark:text-text-primary-dark hover:bg-red-primary dark:hover:bg-red-primary hover:text-text-primary-dark p-2 rounded transition duration-300 ease-in-out" @onclick="Delete" title="Delete Employee">
                <i class="fas fa-trash-alt"></i> Delete
            </button>
        </div>
    </div>

    <div class="md:flex w-full block overflow-y-auto mt-4">
        <div class="md:w-1/2 p-4 bg-background-primary-light dark:bg-background-primary-dark rounded">
            <h3 class="text-lg font-semibold mb-4 text-text-primary-light dark:text-text-primary-dark">Contact Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label for="id" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">ID</label>
                    <InputText id="id" @bind-Value="Employee.IdAsString" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="email" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Email</label>
                    <InputText id="email" @bind-Value="Employee.Email" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="firstName" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">First Name</label>
                    <InputText id="firstName" @bind-Value="Employee.FirstName" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="lastName" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Last Name</label>
                    <InputText id="lastName" @bind-Value="Employee.LastName" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="hireDate" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Hire Date</label>
                    <InputText id="hireDate" @bind-Value="Employee.HireDate" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
                <div>
                    <label for="salary" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Salary</label>
                    <InputText id="salary" @bind-Value="Employee.Salary" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                </div>
            </div>
        </div>
        <div class="md:w-1/2 md:ml-4 mt-4 md:mt-0">
            <div class="p-4 bg-background-primary-light dark:bg-background-primary-dark rounded">
                <h3 class="text-lg font-semibold mb-4 text-text-primary-light dark:text-text-primary-dark">Address</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="Street" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Street</label>
                        <InputText id="Street" @bind-Value="Employee.Street" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                    </div>
                    <div>
                        <label for="City" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">City</label>
                        <InputText id="City" @bind-Value="Employee.City" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                    </div>
                    <div>
                        <label for="ZipCode" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Zip Code</label>
                        <InputText id="ZipCode" @bind-Value="Employee.ZipCode" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                    </div>
                    <div>
                        <label for="Country" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">Country</label>
                        <InputText id="Country" @bind-Value="Employee.Country" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                    </div>
                    @if (!string.IsNullOrWhiteSpace(Employee.State))
                    {
                        <div>
                            <label for="State" class="block text-sm font-medium text-text-primary-light dark:text-text-primary-dark">State</label>
                            <InputText id="State" @bind-Value="Employee.State" class="bg-background-secondary-light dark:bg-background-secondary-dark text-text-primary-light dark:text-text-primary-dark p-2 mt-1 rounded w-full" disabled />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] 
    public Guid Id { get; set; }
    private EmployeeModel Employee { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        var employee = await EmployeesClient.GetById(Id);

        if (employee is null)
        {
            NavigationManager.NavigateTo("/employees");
        }
        
        Employee = new EmployeeModel
        {
            Id = employee!.Id,
            FirstName = employee.FirstName,
            LastName = employee.LastName,
            Email = employee.Email,
            HireDate = employee.HireDate.ToString(),
            IdAsString = employee.Id.ToString(),
            Street = employee.Street,
            City = employee.City,
            ZipCode = employee.ZipCode,
            Country = employee.Country,
            State = employee.State,
            Salary = $"{employee.Amount.ToString(CultureInfo.InvariantCulture)} {employee.Currency}",
        };
    }
    
    public class EmployeeModel
    {
        public Guid Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string HireDate { get; set; } = string.Empty;
        public string Street { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string ZipCode { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public string IdAsString { get; set; } = string.Empty;
        public string Salary { get; set; } = string.Empty;
    }
    
    private async Task Delete()
    {
        await EmployeesClient.Delete(Employee.Id);
        
        NavigationManager.NavigateTo("/employees");
    }
}