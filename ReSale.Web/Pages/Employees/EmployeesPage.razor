@page "/Employees"

@inject IEmployeesClient EmployeesClient
@inject NavigationManager NavigationManager

<PageTitle>ReSale | Employees</PageTitle>

<div class="flex flex-col h-full">
    <div class="flex justify-between">
        <div>
            <h3 class="p-4 bg-table-gray rounded">Employees</h3>
        </div>
        <div class="flex">
            <button class="bg-table-gray hover:bg-green-primary p-[10px] rounded-l" title="Create" @onclick="@(() => NavigationManager.NavigateTo("/employees/create"))">
                <i class="fas fa-plus p-2"></i>
            </button>
            <input type="text" placeholder="Search..." @bind="_searchTerm" class="bg-table-gray p-2 focus:outline-0"/>
            <button class="bg-table-gray hover:bg-blue-primary p-[10px] rounded-r" title="Search" @onclick="Search">
                <i class="fas fa-magnifying-glass p-2"></i>
            </button>
        </div>
        <div></div>
    </div>

    @if (!Employees.Any())
    {
        <div class="mt-4 bg-darker-gray rounded p-4">
            <div class="flex items-center justify-center h-[440px]">
                <p class="text-2xl">No employees found</p>
            </div>
        </div>
    }
    else
    {
        <div class="mt-4 rounded-t flex-grow bg-table-gray overflow-x-auto overflow-y-auto">
            <table class="w-full table-auto">
                <thead class="border-separate border-spacing-0">
                <tr>
                    <th scope="col" class="hidden lg:table-cell sticky top-0 z-10 text-left bg-darker-gray bg-opacity-75 py-2 pl-4 backdrop-blur backdrop-filter font-semibold">ID</th>
                    <th scope="col" class="sticky top-0 z-10 text-left bg-darker-gray bg-opacity-75 py-2 pl-4 lg:pl-2 backdrop-blur backdrop-filter font-semibold">Name</th>
                    <th scope="col" class="sticky top-0 z-10 text-left bg-darker-gray bg-opacity-75 py-2 pl-2 backdrop-blur backdrop-filter font-semibold">Email</th>
                    <th scope="col" class="sticky top-0 z-10 text-left bg-darker-gray bg-opacity-75 py-2 pl-2 backdrop-blur backdrop-filter font-semibold">Hire date</th>
                </tr>
                </thead>
                <tbody class="mt-4">
                @foreach (var employee in Employees)
                {
                <tr class="hover:bg-dark-gray hover:cursor-pointer" @onclick="@(() => NavigationManager.NavigateTo($"/employees/{employee.Id}"))">
                    <td class="hidden lg:table-cell border-t border-b border-dark-gray whitespace-nowrap text-sm py-2 pl-4">@employee.Id</td>
                    <td class="border-t border-b border-dark-gray whitespace-nowrap text-sm py-2 pl-4 lg:pl-2">@employee.FirstName @employee.LastName</td>
                    <td class="border-t border-b border-dark-gray whitespace-nowrap text-sm py-2 pl-2">@employee.Email</td>
                    <td class="border-t border-b border-dark-gray whitespace-nowrap text-sm py-2 pl-2">@employee.HireDate.ToString()</td>
                </tr>
                }
                </tbody>
            </table>
        </div>
    <div class="flex justify-between bg-darker-gray rounded-b h-[40px]">
        <div class="flex items-center ml-4">
            <p class="hidden md:flex">Showing @((_page - 1) * _pageSize + 1) to @Math.Min(_page * _pageSize, _total) of @_total results</p>
            <p class="md:ml-4">Count</p>
            <select class="ml-2 h-[40px] bg-table-gray" @onchange="OnPageSizeChanged">
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="50">100</option>
            </select>
        </div>
        <div class="flex items-center justify-center">
            <button class="hover:bg-blue-primary w-[100px] h-[40px] disabled:bg-light-gray disabled:text-darker-gray" @onclick="PreviousPage" disabled="@(!_hasPreviousPage)">Previous</button>
            <button class="hover:bg-blue-primary w-[100px] h-[40px] rounded-br disabled:bg-light-gray disabled:text-darker-gray" @onclick="NextPage" disabled="@(!_hasNextPage)">Next</button>
        </div>
        </div>
    }
</div>

@code {
    private List<EmployeeModel> Employees { get; set; } = [];
    private string _searchTerm = string.Empty;
    private int _page = 1;
    private int _pageSize = 25;
    private int _total;
    private bool _hasNextPage;
    private bool _hasPreviousPage;
    
    protected override async Task OnInitializedAsync()
    {
        var employeesResponses = await EmployeesClient.Get(_searchTerm, _page, _pageSize);

        _total = employeesResponses.TotalCount;
        _hasNextPage = employeesResponses.HasNextPage;
        _hasPreviousPage = employeesResponses.HasPreviousPage;
        
        Employees = [];
        
        // TODO: Add mapster to map the response to the model
        foreach (var employee in employeesResponses.Items)
        {
            Employees.Add(new EmployeeModel
            {
                Id = employee.Id,
                FirstName = employee.FirstName,
                LastName = employee.LastName,
                Email = employee.Email,
                HireDate = employee.HireDate
            });
        }
    }
    
    private async Task PreviousPage()
    {
        if (_page > 1)
        {
            _page--;
            await OnInitializedAsync();
        }
    }

    private async Task NextPage()
    {
        if (_page * _pageSize < _total)
        {
            _page++;
            await OnInitializedAsync();
        }
    }
    
    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        _pageSize = int.Parse(e.Value!.ToString()!);
        _page = 1;
        await OnInitializedAsync();
    }
    
    private async Task Search()
    {
        _page = 1;
        await OnInitializedAsync();
    }
    
    private class EmployeeModel
    {
        public Guid Id { get; init; }
        public string Email { get; init; } = string.Empty;
        public string FirstName { get; init; } = string.Empty;
        public string LastName { get; init; } = string.Empty;
        public DateOnly HireDate { get; init; }
    }
}